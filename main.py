from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os

import csv
from datetime import datetime

def log_user_action(user_id, username, action, data):
    with open("user_log.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().isoformat(), user_id, username, action, data])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ user_id
def get_trial_count(user_id):
    try:
        with open("user_log.csv", "r", encoding="utf-8") as f:
            return sum(
                int(row[1]) == int(user_id) and "–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî —Å—Å—ã–ª–∫–∞" in row[3]
                for row in csv.reader(f)
            )
    except FileNotFoundError:
        return 0

from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup([["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"]], resize_keyboard=True, one_time_keyboard=True)
menu_keyboard = ReplyKeyboardMarkup([["–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑"], ["–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Ä—Ö–∏–º–µ—Ç—Ä–∏–∫—Å ‚Äî —É–º–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=start_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if text == "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        print(f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user_id}, username={username}")
        log_user_action(user_id, username, "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "")
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

    elif text == "–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await update.message.reply_text(
            "–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å [5] –∏–∑ 5 –ø—Ä–æ–±–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∫–∞–Ω–∞–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª."
        )
        log_user_action(user_id, username, "–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "")

    elif text == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü":
        await update.message.reply_text(
            "üí≥ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /subscribe –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é (—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)."
        )
        log_user_action(user_id, username, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", "")

    elif text.startswith("https://t.me/"):
        print(f"–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={user_id}, username={username}, —Å—Å—ã–ª–∫–∞={text}")
        log_user_action(user_id, username, "–ü—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî —Å—Å—ã–ª–∫–∞", text)
        await update.message.reply_text(
            "üü¢ –ü—Ä–∏–Ω—è—Ç–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—è—Ç. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()